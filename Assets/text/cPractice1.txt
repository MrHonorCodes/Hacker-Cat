#include <iostream>
#include <fstream>
#include <sstream>
using namespace std;
template <class T>
class Node{
    private:
    T data;
    
    public:
    Node<T>* next;
    Node<T>* prev;
    Node<T>* up;
    Node<T>* down;
    
    Node<T>(T value){
        data = value;
        next = nullptr;
        prev = nullptr;
        up = nullptr;
        down = nullptr;
    }
    T getData() const {
        return data;
    }
    void setData(T value){
        data = value;
    }
    
};
template <class T>
class Auditorium{
    private:
    Node<T>* head;
    public:
    class IndexError{
        private:
        int err;
        public:
        IndexError(int errNum){err = errNum;}
        int getErrIndex()const{return err;}
        string toString()const{return "The index is out of bounds.";}
    };
    Auditorium<T>(){
        head = nullptr;
    }
    //destructor
    ~Auditorium<T>(){ clear(); }
    void append(T value){
        Node<T>* temp = new Node<T>(value);//new node to be appended
        Node<T>* curr = head;
        if(head == nullptr)
            head = temp;
        else{
            while(curr->down != nullptr)
                curr = curr->down;
            while(curr->next != nullptr){
                curr = curr->next;
            }
                
            curr->next = temp;
            temp->prev = curr;
            if(curr->up != nullptr){
                curr = curr->up;
                curr = curr->next;
                curr->down = temp;
                temp->up = curr;
            }   
        }
    }
    void addDown(T value){
        Node<T>* temp = new Node<T>(value);
        Node<T>* curr = head;
        if(head == nullptr)
            head = temp;
        else{
            if(head->down == nullptr){
                head->down = temp;
                temp->up = head;
            }
            else{
                while(curr->down != nullptr){
                    curr = curr->down;
                }
                curr->down = temp;
                temp->up = curr;
            }     
        }